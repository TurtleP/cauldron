nest = require("libraries.nest")\init({mode: "ctr", emulateJoystick: true})
utf8 = require("utf8")

font, font_quads = nil, {}
scale = 1
selection = 1

global glyph_width = 8 * scale

progress_timer = 0
progress_char = {"!", "@", "#", "$", "^", "&", "+", "?"}

progress_index = 1

love.graphics.setDefaultFilter("nearest", "nearest")

if love._os ~= "Horizon" then
    love.system.getVersion = ->
        "Unknown"

    love.system.getRegion = ->
        "Unknown"

    love.system.getModel = ->
        "Unknown"

    love.system.getUsername = ->
        "Unknown"

strings    = require("strings")
test_suite = require("suite")
terminal   = require("terminal")

love.load = ->
    font = love.graphics.newImage("graphics/font.png")
    glyphs = "0123456789abcdefghijklmnopqrstuvwxyz.:/,'C-_>X !{}?[]*()=%!@#$^&+?"

    for index = 1, #glyphs do
        glyph_value = glyphs\sub(index, index)
        font_quads[glyph_value] = love.graphics.newQuad((index - 1) * 8, 0, 8, 8, font)

draw_text = (text, x, y) ->
    text = tostring(text)\lower!

    x = x ?? 0
    y = y ?? 0

    start_x = x

    for index = 1, #text do
        glyph = text\sub(index, index)

        if glyph == "\n" or glyph == "|" then
            x = (start_x - (index * glyph_width))
            y += glyph_width
        else
            if not font_quads[glyph] then
                print("Glyph '#{glyph}' does not exist!")
            else
                love.graphics.draw(font, font_quads[glyph], x + (index - 1) * glyph_width, y, 0, scale, scale)

    y + glyph_width

love.update = (dt) ->
    progress_timer = progress_timer + 8 * dt
    progress_index = math.floor(progress_timer % #progress_char) + 1

    test_suite\update(dt)

love.draw = (screen) ->
    if screen ~= "bottom" then
        draw_text(terminal\createHeader(strings.AppName))

        battery_info = table.concat({love.system.getPowerInfo!}, ", ") .. "%"
        current_module = test_suite\modules![selection]

        passing_count = test_suite\passing!
        total_tests_count = test_suite\totalTests(selection)
        overall_status = test_suite\status!

        status_value = overall_status
        if overall_status == Status.STATUS_RUNNING then
            status_value = progress_char[progress_index]

        draw_text(strings.Information\format(battery_info, current_module, passing_count, total_tests_count, status_value), 0, 8)
        draw_text(terminal\createHeader!, 0, terminal\height! - 24)

        instructions_position = terminal\calculate(strings.Instructions)
        draw_text(strings.Instructions, instructions_position, terminal\height! - 16)
        draw_text(terminal\createHeader(strings.AppType), 0, terminal\height! - 8)

love.gamepadpressed = (_, button) ->
    if button == "leftshoulder" then
        selection = math.max(selection - 1, 1)
    elseif button == "rightshoulder" then
        selection = math.min(selection + 1, #test_suite\modules!)
    elseif button == "start" then
        love.event.quit!
    elseif button == "a" then
        test_suite\run(selection)
    elseif button == "x" then
        if test_suite\modules![selection].stop then
            test_suite\modules![selection]\stop!
