class Data

    @CompressionString = "Hello World!"
    @ExpectedPath = "expected/data"

    @ExpectedLz4     = love.filesystem.read("#{@@ExpectedPath}/compressStringLz4.txt")
    @ExpectedZlib    = love.filesystem.read("#{@@ExpectedPath}/compressStringZlib.txt")
    @ExpectedGzip    = love.filesystem.read("#{@@ExpectedPath}/compressStringGzip.txt")
    @ExpectedDeflate = love.filesystem.read("#{@@ExpectedPath}/compressStringDeflate.txt")

    @ExpectedMd5    = love.filesystem.read("#{@@ExpectedPath}/stringmd5.txt")
    @ExpectedSha1   = love.filesystem.read("#{@@ExpectedPath}/stringsha1.txt")
    @ExpectedSha224 = love.filesystem.read("#{@@ExpectedPath}/stringsha224.txt")
    @ExpectedSha256 = love.filesystem.read("#{@@ExpectedPath}/stringsha256.txt")
    @ExpectedSha384 = love.filesystem.read("#{@@ExpectedPath}/stringsha384.txt")
    @ExpectedSha512 = love.filesystem.read("#{@@ExpectedPath}/stringsha512.txt")

    -- Compress as String --

    testCompressStringLz4: =>
        data = love.data.compress("string", "lz4", @@CompressionString)

        return data == @@ExpectedLz4

    testCompressStringZlib: =>
        data = love.data.compress("string", "zlib", @@CompressionString)

        return data == @@ExpectedZlib

    -- Since gzip uses OS ID in the header
    -- we need to skip that byte
    testCompressStringGzip: =>
        data = love.data.compress("string", "gzip", @@CompressionString)

        return data\sub(0x01, 0x08) == @@ExpectedGzip\sub(0x01, 0x08) and data\sub(0xB) == @@ExpectedGzip\sub(0xB)

    testCompressStringDeflate: =>
        data = love.data.compress("string", "deflate", @@CompressionString)

        return data == @@ExpectedDeflate

    -- Compress as Data --

    testCompressDataLz4: =>
        data = love.data.compress("data", "lz4", @@CompressionString)

        return data\getString! == @@ExpectedLz4

    testCompressDataZlib: =>
        data = love.data.compress("data", "zlib", @@CompressionString)

        return data\getString! == @@ExpectedZlib

    -- Since gzip uses OS ID in the header
    -- we need to skip that byte
    testCompressDataGzip: =>
        data = love.data.compress("data", "gzip", @@CompressionString)
        string_value = data\getString!

        return string_value\sub(0x01, 0x08) == @@ExpectedGzip\sub(0x01, 0x08) and string_value\sub(0xB) == @@ExpectedGzip\sub(0xB)

    testCompressDataDeflate: =>
        data = love.data.compress("data", "deflate", @@CompressionString)

        return data\getString! == @@ExpectedDeflate

    testGetSize: =>
        data = love.data.newByteData(@@CompressionString)

        return data\getSize! == 12

    testGetString: =>
        data = love.data.newByteData(@@CompressionString)

        return data\getString! == @@CompressionString

    testNewByteDataSize: =>
        data = love.data.newByteData(420)

        return data\getSize! == 420

    testNewByteDataCopy: =>
        data = love.data.newByteData(@@CompressionString)
        copy = love.data.newByteData(data, 6, 5)

        return copy\getString! == "World"

    testNewDataView: =>
        data = love.data.newByteData(@@CompressionString)
        view = love.data.newDataView(data, 0, data\getSize!)

        return view\getString! == @@CompressionString and view\getSize! == #@@CompressionString

    testHashStringMd5: =>
        data = love.data.hash("md5", @@CompressionString)

        return data == @@ExpectedMd5

    testHashStringSha1: =>
        data = love.data.hash("sha1", @@CompressionString)

        return data == @@ExpectedSha1

    testHashStringSha224: =>
        data = love.data.hash("sha224", @@CompressionString)

        return data == @@ExpectedSha224

    testHashStringSha256: =>
        data = love.data.hash("sha256", @@CompressionString)

        return data == @@ExpectedSha256

    testHashStringSha384: =>
        data = love.data.hash("sha384", @@CompressionString)

        return data == @@ExpectedSha384

    testHashStringSha512: =>
        data = love.data.hash("sha512", @@CompressionString)

        return data == @@ExpectedSha512

return Data
