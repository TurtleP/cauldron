global class Status
    @STATUS_PASSED: "Passed",
    @STATUS_FAILED: "Failed",
    @STATUS_UNKNOWN: "Unknown"
    @STATUS_RUNNING: "Running"

class TestSuite
    new: =>
        files = love.filesystem.getDirectoryItems("tests")

        @classes = {}
        for item in *files
            if item\sub(-4) == ".lua" then
                table.insert(@classes, require("tests." .. item\gsub(".lua", "")))

        @class_names = {}
        for class_table in *@classes do
            table.insert(@class_names, class_table.__name)

        table.insert(@class_names, 1, "all")

        for index = 1, #@classes do
            @classes[index] = @classes[index]!

        @functions = {}
        @current = 1
        @_sleep = 0

        @_passing = 0
        @_total   = 0
        @_running = false

        @log = love.filesystem.newFile("log.txt", "w")

    modules: =>
        @class_names

    passing: =>
        @_passing

    totalTests: (index) =>
        @_total = 0

        if index == 1 then
            return 0
        else
            instance = getmetatable(@classes[index - 1])
            for name, value in pairs(instance) do
                is_test = name\sub(1, 4) == "test"
                if type(value) == "function" and is_test then
                    @_total += 1

        return @_total

    status: =>
        if not @_running or @_total == 0 then
            return Status.STATUS_UNKNOWN
        elseif @_running then
            if @_passing < @_total then
                return Status.STATUS_RUNNING

        if @passing! == @_total then
            return Status.STATUS_PASSED
        elseif @passing! != @_total then
            return Status.STATUS_FAILED

    update: (dt) =>
        if @_running then
            if @_sleep > 0 then
                @_sleep = math.max(@_sleep - dt, 0)

            current_test = @functions[@current]
            if @_sleep == 0
                if @current <= #@functions then
                    sleep, result = current_test.func(current_test.instance)
                    status = "Passed"

                    if result == true or type(sleep) == "boolean" and sleep then
                        @_passing += 1
                    else
                        status = "Failed"

                    @current += 1

                    @log\write("  #{current_test.name}: #{status}!\n")
                    @_sleep = type(sleep) == "number" and sleep or 1
                else
                    @_running = false

    run: (index) =>
        index = index ?? 1
        @_running = true

        if index == 1 then
            return
        else
            @log\write("[#{@class_names[index]}]\n")
            instance = getmetatable(@classes[index - 1])

            for name, value in pairs(instance)
                is_test = name\sub(1, 4) == "test"
                if type(value) == "function" and is_test then
                    table.insert(@functions, {instance: instance, func: value, name: name})


return TestSuite!
